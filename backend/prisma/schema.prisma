// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id                  Int                  @id @default(autoincrement())
  nom                 String
  prenom              String
  email               String               @unique
  adresse             String?
  photo               String?
  login               String               @unique
  password            String
  telephone           String?
  genre               String

  // Relations
  profilId            Int?
  profil              Profil?              @relation(fields: [profilId], references: [id])

  profilSortiId       Int?
  profilSorti         ProfilSorti?         @relation(fields: [profilSortiId], references: [id])

  referentielId       Int?
  referentiel         Referentiel?         @relation(fields: [referentielId], references: [id])

  competences         UtilisateurCompetence[]
  groupes             UtilisateurGroupe[]
  
}

model Profil {
  id           Int            @id @default(autoincrement())
  nomP         String
  utilisateurs Utilisateur[]
}

model ProfilSorti {
  id           Int            @id @default(autoincrement())
  nom          String
  utilisateurs Utilisateur[]
}

model Promotion {
  id           Int            @id @default(autoincrement())
  nom          String
  nbrRef       String
  annee        String


  referentiels RefPromo[]
}

model Niveaux {
  id           Int           @id @default(autoincrement())
  nom          String
  competences  Competence[]
}

model Competence {
  id           Int           @id @default(autoincrement())
  description  String
  niveauxId    Int?
  niveaux      Niveaux?      @relation(fields: [niveauxId], references: [id])

  utilisateurs UtilisateurCompetence[]
  briefs       BriefCompetence[]   // ✅ défini plus bas
  referentiels RefCompetences[]
}

model Referentiel {
  id           Int           @id @default(autoincrement())
  nom          String

  promotions   RefPromo[]
  utilisateurs Utilisateur[]
  competences  RefCompetences[]
}

model Tag {
  id           Int           @id @default(autoincrement())
  libelle      String
  briefs       BriefTag[]   // ✅ défini plus bas
}

/// ======================
/// Tables de liaison
/// ======================

model RefPromo {
  id             Int         @id @default(autoincrement())
  promotionId    Int
  referentielId  Int
  promotion      Promotion   @relation(fields: [promotionId], references: [id])
  referentiel    Referentiel @relation(fields: [referentielId], references: [id])
}

model RefCompetences {
  id             Int         @id @default(autoincrement())
  referentielId  Int
  competenceId   Int
  referentiel    Referentiel @relation(fields: [referentielId], references: [id])
  competence     Competence  @relation(fields: [competenceId], references: [id])
}

model UtilisateurCompetence {
  id             Int          @id @default(autoincrement())
  utilisateurId  Int
  competenceId   Int
  utilisateur    Utilisateur  @relation(fields: [utilisateurId], references: [id])
  competence     Competence   @relation(fields: [competenceId], references: [id])
}

model UtilisateurGroupe {
  id             Int          @id @default(autoincrement())
  utilisateurId  Int
  groupeId       Int
  utilisateur    Utilisateur  @relation(fields: [utilisateurId], references: [id])
  groupe         Groupe       @relation(fields: [groupeId], references: [id])
}

/// ======================
/// ✅ Modèles manquants
/// ======================

// Table pivot Brief <-> Competence
model BriefCompetence {
  id           Int         @id @default(autoincrement())
  briefId      Int
  competenceId Int
  brief        Brief       @relation(fields: [briefId], references: [id])
  competence   Competence  @relation(fields: [competenceId], references: [id])
}

// Table pivot Brief <-> Tag
model BriefTag {
  id       Int   @id @default(autoincrement())
  briefId  Int
  tagId    Int
  brief    Brief @relation(fields: [briefId], references: [id])
  tag      Tag   @relation(fields: [tagId], references: [id])
}

// Table Groupe
model Groupe {
  id            Int                @id @default(autoincrement())
  nom           String
  utilisateurs  UtilisateurGroupe[]
}

// Table Brief (manquante aussi pour les pivots)
model Brief {
  id           Int               @id @default(autoincrement())
  titre        String
  description  String?
  competences  BriefCompetence[]
  tags         BriefTag[]
}
